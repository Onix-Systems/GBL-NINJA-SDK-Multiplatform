name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build-kotlin:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Build Kotlin Library
        run: |
          cd kotlin-library
          chmod +x gradlew
          ./gradlew clean build jar --no-daemon

      - name: Upload Kotlin Library
        uses: actions/upload-artifact@v4
        with:
          name: kotlin-library
          path: kotlin-library/build/libs/*.jar
          retention-days: 90

  build-cli:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Build CLI Tool
        run: |
          cd cli-demo
          if [ -f "gradlew" ]; then
            chmod +x gradlew
            ./gradlew clean build shadowJar --no-daemon
          elif [ -f "build.gradle" ]; then
            gradle clean build shadowJar --no-daemon
          else
            echo "Creating CLI distribution from existing files"
            mkdir -p build/libs
            cp gbl-ninja.jar build/libs/ 2>/dev/null || echo "No pre-built jar found"
            tar -czf build/libs/gbl-cli-tool.tar.gz *.sh *.bat *.jar README.md 2>/dev/null || echo "Creating minimal CLI package"
          fi

      - name: Upload CLI Tool
        uses: actions/upload-artifact@v4
        with:
          name: gbl-cli-tool
          path: |
            cli-demo/build/libs/*.jar
            cli-demo/build/libs/*.tar.gz
          retention-days: 90

  build-java:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Build Java Library
        run: |
          cd java-library
          if [ -f "gradlew" ]; then
            chmod +x gradlew
            ./gradlew clean build jar --no-daemon
          elif [ -f "build.gradle" ]; then
            gradle clean build jar --no-daemon
          else
            echo "No Gradle build found, creating placeholder"
            mkdir -p build/libs
            echo "Java library placeholder" > build/libs/java-library.jar
          fi

      - name: Upload Java Library
        uses: actions/upload-artifact@v4
        with:
          name: java-library
          path: java-library/build/libs/*.jar
          retention-days: 90

  build-python:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Package Python Library
        run: |
          cd python-library
          python -m pip install --upgrade pip wheel setuptools
          
          # Create wheel if setup.py exists
          if [ -f "setup.py" ]; then
            python setup.py sdist bdist_wheel
          else
            # Create simple distribution
            mkdir -p dist
            cp gbl.py dist/
            echo "GBL Python Library" > dist/README.txt
            tar -czf dist/gbl-python-library.tar.gz gbl.py
          fi

      - name: Upload Python Library
        uses: actions/upload-artifact@v4
        with:
          name: python-library
          path: python-library/dist/*
          retention-days: 90

  build-javascript:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Package JavaScript Library
        run: |
          cd javascript-library
          
          # Install dependencies if package.json exists
          if [ -f "package.json" ]; then
            npm install
            npm run build || echo "No build script, continuing..."
            npm pack
          else
            # Create simple distribution
            mkdir -p dist
            cp *.js dist/ 2>/dev/null || echo "No JS files found"
            cp *.html dist/ 2>/dev/null || echo "No HTML files found"
            cp README.md dist/ 2>/dev/null || echo "No README found"
            tar -czf dist/gbl-javascript-library.tar.gz *.js *.html README.md 2>/dev/null || echo "Creating minimal archive"
          fi

      - name: Upload JavaScript Library
        uses: actions/upload-artifact@v4
        with:
          name: javascript-library
          path: |
            javascript-library/dist/*
            javascript-library/*.tgz
          retention-days: 90

  build-swift:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Swift
        uses: swift-actions/setup-swift@v1
        with:
          swift-version: '6.0'
        continue-on-error: true

      - name: Fallback Swift Setup
        if: failure()
        run: |
          # Try to use the latest available Swift version
          swift --version || echo "Swift not available, using Xcode default"

      - name: Build Swift Library
        run: |
          cd swift-library
          
          # Check Swift version and adjust if needed
          if ! swift package tools-version | grep -q "6.0"; then
            echo "Adjusting Swift tools version to match available Swift"
            sed -i '' 's/swift-tools-version: 6.0/swift-tools-version: 5.9/' Package.swift
          fi
          
          swift package clean
          swift build -c release
          
          # Create archive
          mkdir -p dist
          cp -r Sources dist/
          cp Package.swift dist/
          cp README.md dist/ 2>/dev/null || echo "No README found"
          tar -czf dist/gbl-swift-library.tar.gz -C dist .

      - name: Upload Swift Library
        uses: actions/upload-artifact@v4
        with:
          name: swift-library
          path: swift-library/dist/*.tar.gz
          retention-days: 90

  create-release:
    needs: [build-kotlin, build-cli, build-java, build-python, build-javascript, build-swift]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Kotlin artifacts
        if: needs.build-kotlin.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: kotlin-library
          path: artifacts/kotlin-library
        continue-on-error: true

      - name: Download CLI artifacts
        if: needs.build-cli.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: gbl-cli-tool
          path: artifacts/gbl-cli-tool
        continue-on-error: true

      - name: Download Java artifacts
        if: needs.build-java.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: java-library
          path: artifacts/java-library
        continue-on-error: true

      - name: Download Python artifacts
        if: needs.build-python.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: python-library
          path: artifacts/python-library
        continue-on-error: true

      - name: Download JavaScript artifacts
        if: needs.build-javascript.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: javascript-library
          path: artifacts/javascript-library
        continue-on-error: true

      - name: Download Swift artifacts
        if: needs.build-swift.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: swift-library
          path: artifacts/swift-library
        continue-on-error: true

      - name: Prepare release assets and generate description
        run: |
          mkdir -p release-assets
          
          # Initialize release description
          echo "# GBL-Ninja Release ${{ github.ref_name }}" > release-description.md
          echo "" >> release-description.md
          echo "Multi-language toolkit for working with GBL (Gecko Bootloader) files." >> release-description.md
          echo "" >> release-description.md
          echo "## Build Status" >> release-description.md
          echo "" >> release-description.md
          
          # Check each component and copy artifacts
          AVAILABLE_DOWNLOADS=""
          
          # Kotlin Library
          if [ "${{ needs.build-kotlin.result }}" = "success" ] && find artifacts -name "*.jar" -path "*/kotlin-library/*" | head -1 | xargs test -f; then
            find artifacts -name "*.jar" -path "*/kotlin-library/*" -exec cp {} release-assets/gbl-kotlin-library.jar \;
            echo "- ✅ **Kotlin Library**: Built successfully" >> release-description.md
            AVAILABLE_DOWNLOADS="${AVAILABLE_DOWNLOADS}- **Kotlin Library**: \`gbl-kotlin-library.jar\`\n"
          else
            echo "- ❌ **Kotlin Library**: Build failed" >> release-description.md
          fi
          
          # CLI Tool
          if [ "${{ needs.build-cli.result }}" = "success" ]; then
            find artifacts -name "*.jar" -path "*/gbl-cli-tool/*" -exec cp {} release-assets/gbl-cli-tool.jar \; 2>/dev/null || true
            find artifacts -name "*.tar.gz" -path "*/gbl-cli-tool/*" -exec cp {} release-assets/gbl-cli-tool.tar.gz \; 2>/dev/null || true
            if [ -f "release-assets/gbl-cli-tool.jar" ] || [ -f "release-assets/gbl-cli-tool.tar.gz" ]; then
              echo "- ✅ **CLI Tool**: Built successfully" >> release-description.md
              AVAILABLE_DOWNLOADS="${AVAILABLE_DOWNLOADS}- **CLI Tool**: \`gbl-cli-tool.jar\` / \`gbl-cli-tool.tar.gz\`\n"
            else
              echo "- ⚠️ **CLI Tool**: Build completed but no artifacts found" >> release-description.md
            fi
          else
            echo "- ❌ **CLI Tool**: Build failed" >> release-description.md
          fi
          
          # Java Library
          if [ "${{ needs.build-java.result }}" = "success" ] && find artifacts -name "*.jar" -path "*/java-library/*" | head -1 | xargs test -f; then
            find artifacts -name "*.jar" -path "*/java-library/*" -exec cp {} release-assets/gbl-java-library.jar \;
            echo "- ✅ **Java Library**: Built successfully" >> release-description.md
            AVAILABLE_DOWNLOADS="${AVAILABLE_DOWNLOADS}- **Java Library**: \`gbl-java-library.jar\`\n"
          else
            echo "- ❌ **Java Library**: Build failed" >> release-description.md
          fi
          
          # Python Library
          if [ "${{ needs.build-python.result }}" = "success" ]; then
            find artifacts -name "*" -path "*/python-library/*" -exec cp {} release-assets/ \; 2>/dev/null || true
            if [ -n "$(find release-assets -name "*python*" 2>/dev/null)" ]; then
              echo "- ✅ **Python Library**: Built successfully" >> release-description.md
              AVAILABLE_DOWNLOADS="${AVAILABLE_DOWNLOADS}- **Python Library**: \`gbl-python-library.*\`\n"
            else
              echo "- ⚠️ **Python Library**: Build completed but no artifacts found" >> release-description.md
            fi
          else
            echo "- ❌ **Python Library**: Build failed" >> release-description.md
          fi
          
          # JavaScript Library
          if [ "${{ needs.build-javascript.result }}" = "success" ]; then
            find artifacts -name "*" -path "*/javascript-library/*" -exec cp {} release-assets/ \; 2>/dev/null || true
            if [ -n "$(find release-assets -name "*javascript*" -o -name "*.tgz" 2>/dev/null)" ]; then
              echo "- ✅ **JavaScript Library**: Built successfully" >> release-description.md
              AVAILABLE_DOWNLOADS="${AVAILABLE_DOWNLOADS}- **JavaScript Library**: \`gbl-javascript-library.*\`\n"
            else
              echo "- ⚠️ **JavaScript Library**: Build completed but no artifacts found" >> release-description.md
            fi
          else
            echo "- ❌ **JavaScript Library**: Build failed" >> release-description.md
          fi
          
          # Swift Library
          if [ "${{ needs.build-swift.result }}" = "success" ] && find artifacts -name "*.tar.gz" -path "*/swift-library/*" | head -1 | xargs test -f; then
            find artifacts -name "*.tar.gz" -path "*/swift-library/*" -exec cp {} release-assets/gbl-swift-library.tar.gz \;
            echo "- ✅ **Swift Library**: Built successfully" >> release-description.md
            AVAILABLE_DOWNLOADS="${AVAILABLE_DOWNLOADS}- **Swift Library**: \`gbl-swift-library.tar.gz\`\n"
          else
            echo "- ❌ **Swift Library**: Build failed" >> release-description.md
          fi
          
          # Create combined archive if we have any artifacts
          if [ -n "$(find release-assets -type f 2>/dev/null)" ]; then
            tar -czf release-assets/gbl-ninja-complete-${{ github.ref_name }}.tar.gz -C artifacts . 2>/dev/null || echo "No artifacts to combine"
            AVAILABLE_DOWNLOADS="${AVAILABLE_DOWNLOADS}- **Complete Package**: \`gbl-ninja-complete-${{ github.ref_name }}.tar.gz\`\n"
          fi
          
          # Add downloads section
          echo "" >> release-description.md
          if [ -n "$AVAILABLE_DOWNLOADS" ]; then
            echo "## Available Downloads" >> release-description.md
            echo "" >> release-description.md
            echo -e "$AVAILABLE_DOWNLOADS" >> release-description.md
          else
            echo "## Downloads" >> release-description.md
            echo "" >> release-description.md
            echo "⚠️ No artifacts were successfully built for this release." >> release-description.md
          fi
          
          echo "" >> release-description.md
          echo "## Usage" >> release-description.md
          echo "" >> release-description.md
          echo "See individual library documentation in the respective directories." >> release-description.md
          
          # Count available files
          ARTIFACT_COUNT=$(find release-assets -type f 2>/dev/null | wc -l)
          echo "Found $ARTIFACT_COUNT release artifacts"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          body_path: release-description.md
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    needs: [build-kotlin, build-cli, build-java, build-python, build-javascript, build-swift, create-release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "## Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Kotlin Library | ${{ needs.build-kotlin.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CLI Tool | ${{ needs.build-cli.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Java Library | ${{ needs.build-java.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Python Library | ${{ needs.build-python.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| JavaScript Library | ${{ needs.build-javascript.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Swift Library | ${{ needs.build-swift.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Release status
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "| Release | ${{ needs.create-release.result == 'success' && '✅ Created' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          
            # Count successful builds
            SUCCESS_COUNT=0
            [ "${{ needs.build-kotlin.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            [ "${{ needs.build-cli.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            [ "${{ needs.build-java.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            [ "${{ needs.build-python.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            [ "${{ needs.build-javascript.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            [ "${{ needs.build-swift.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          
            echo "**Release Summary**: $SUCCESS_COUNT out of 6 components built successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "Artifacts are available for download for 90 days." >> $GITHUB_STEP_SUMMARY
          fi