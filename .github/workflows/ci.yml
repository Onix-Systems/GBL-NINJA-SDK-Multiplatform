name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build-kotlin:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Build Kotlin Library
        run: |
          cd kotlin-library
          chmod +x gradlew
          ./gradlew clean build jar --no-daemon

      - name: Upload Kotlin Library
        uses: actions/upload-artifact@v4
        with:
          name: kotlin-library
          path: kotlin-library/build/libs/*.jar
          retention-days: 90

  build-cli:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Build CLI Tool
        run: |
          cd gbl-tool-cli
          chmod +x gradlew
          ./gradlew clean build shadowJar --no-daemon

      - name: Upload CLI Tool
        uses: actions/upload-artifact@v4
        with:
          name: gbl-cli-tool
          path: gbl-tool-cli/build/libs/*-all.jar
          retention-days: 90

  build-java:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Build Java Library
        run: |
          cd java-library
          chmod +x gradlew
          ./gradlew clean build jar --no-daemon

      - name: Upload Java Library
        uses: actions/upload-artifact@v4
        with:
          name: java-library
          path: java-library/build/libs/*.jar
          retention-days: 90

  build-python:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Package Python Library
        run: |
          cd python-library
          python -m pip install --upgrade pip wheel setuptools
          
          # Create wheel if setup.py exists
          if [ -f "setup.py" ]; then
            python setup.py sdist bdist_wheel
          else
            # Create simple distribution
            mkdir -p dist
            cp gbl.py dist/
            echo "GBL Python Library" > dist/README.txt
            tar -czf dist/gbl-python-library.tar.gz gbl.py
          fi

      - name: Upload Python Library
        uses: actions/upload-artifact@v4
        with:
          name: python-library
          path: python-library/dist/*
          retention-days: 90

  build-javascript:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Package JavaScript Library
        run: |
          cd javascript-library
          
          # Install dependencies if package.json exists
          if [ -f "package.json" ]; then
            npm install
            npm run build || echo "No build script, continuing..."
            npm pack
          else
            # Create simple distribution
            mkdir -p dist
            cp *.js dist/ 2>/dev/null || echo "No JS files found"
            cp *.html dist/ 2>/dev/null || echo "No HTML files found"
            cp README.md dist/ 2>/dev/null || echo "No README found"
            tar -czf dist/gbl-javascript-library.tar.gz *.js *.html README.md 2>/dev/null || echo "Creating minimal archive"
          fi

      - name: Upload JavaScript Library
        uses: actions/upload-artifact@v4
        with:
          name: javascript-library
          path: |
            javascript-library/dist/*
            javascript-library/*.tgz
          retention-days: 90

  build-swift:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Swift
        uses: swift-actions/setup-swift@v1
        with:
          swift-version: '5.9'

      - name: Build Swift Library
        run: |
          cd swift-library
          swift package clean
          swift build -c release
          
          # Create archive
          mkdir -p dist
          cp -r Sources dist/
          cp Package.swift dist/
          cp README.md dist/ 2>/dev/null || echo "No README found"
          tar -czf dist/gbl-swift-library.tar.gz -C dist .

      - name: Upload Swift Library
        uses: actions/upload-artifact@v4
        with:
          name: swift-library
          path: swift-library/dist/*.tar.gz
          retention-days: 90

  create-release:
    needs: [build-kotlin, build-cli, build-java, build-python, build-javascript, build-swift]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Copy and rename artifacts
          find artifacts -name "*.jar" -path "*/kotlin-library/*" -exec cp {} release-assets/gbl-kotlin-library.jar \;
          find artifacts -name "*-all.jar" -path "*/gbl-cli-tool/*" -exec cp {} release-assets/gbl-cli-tool.jar \;
          find artifacts -name "*.jar" -path "*/java-library/*" -exec cp {} release-assets/gbl-java-library.jar \;
          find artifacts -name "*.tar.gz" -path "*/python-library/*" -exec cp {} release-assets/gbl-python-library.tar.gz \;
          find artifacts -name "*.tar.gz" -path "*/javascript-library/*" -exec cp {} release-assets/gbl-javascript-library.tar.gz \;
          find artifacts -name "*.tar.gz" -path "*/swift-library/*" -exec cp {} release-assets/gbl-swift-library.tar.gz \;
          
          # Create combined archive
          tar -czf release-assets/gbl-ninja-complete-${GITHUB_REF_NAME}.tar.gz -C artifacts .

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          body: |
            # GBL-Ninja Release ${{ github.ref_name }}
            
            Multi-language toolkit for working with GBL (Gecko Bootloader) files.
            
            ## Downloads
            
            - **Kotlin Library**: `gbl-kotlin-library.jar`
            - **Java Library**: `gbl-java-library.jar`
            - **CLI Tool**: `gbl-cli-tool.jar`
            - **Python Library**: `gbl-python-library.tar.gz`
            - **JavaScript Library**: `gbl-javascript-library.tar.gz`
            - **Swift Library**: `gbl-swift-library.tar.gz`
            - **Complete Package**: `gbl-ninja-complete-${{ github.ref_name }}.tar.gz`
            
            ## Usage
            
            See individual library documentation in the respective directories.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    needs: [build-kotlin, build-cli, build-java, build-python, build-javascript, build-swift]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "## Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Kotlin Library | ${{ needs.build-kotlin.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CLI Tool | ${{ needs.build-cli.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Java Library | ${{ needs.build-java.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Python Library | ${{ needs.build-python.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| JavaScript Library | ${{ needs.build-javascript.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Swift Library | ${{ needs.build-swift.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Artifacts are available for download for 90 days." >> $GITHUB_STEP_SUMMARY